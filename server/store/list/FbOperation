[
	{
		"content": "query GetRoleBindApis($code: String!) {\n  data: system_getRoleBindApis(GETApiV1RoleApisInput: {code: $code}) {\n    content\n    createTime\n    deleteTime\n    enabled\n    id\n    illegal\n    isPublic\n    liveQuery\n    method\n    operationType\n    remark\n    restUrl\n    roleType\n    roles\n    title\n    updateTime\n  }\n}",
		"createTime": "2023-03-28 10:10:29Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1516639650775040,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/System/GetRoleBindApis",
		"updateTime": ""
	},
	{
		"content": "mutation BindRoleApis($allRoles: [String]!, $apis: [Int]!, $roleCode: String!) {\n  data: system_bindRoleApis(\n    POSTApiV1RoleBindApiInput: {roleCode: $roleCode, apis: $apis, allRoles: $allRoles}\n  ) {\n    count\n  }\n}",
		"createTime": "2023-03-28 10:10:29Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1516639652216832,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/System/BindRoleApis",
		"updateTime": ""
	},
	{
		"content": "mutation CreateOnePost($title: String!, $poster: String, $publishedAt: DateTime, $userId: String! @fromClaim(name: USERID)) {\n  data: main_createOnePost(\n    data: {title: $title, poster: $poster, publishedAt: $publishedAt, User: {connect: {id: $userId}}}\n  ) {\n    id\n    title\n    poster\n    publishedAt\n    authorId\n    User {\n      name\n      id\n      avatarUrl\n    }\n  }\n}",
		"createTime": "2023-03-29 03:42:25Z",
		"deleteTime": "",
		"enabled": false,
		"id": 1520776042184704,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Post/CreateOnePost",
		"updateTime": "2023-03-29 03:44:26Z"
	},
	{
		"content": "mutation DeleteOnePost($id: Int!) {\n  data: main_deleteOnePost(where: {id: $id}) {\n    id\n  }\n}",
		"createTime": "2023-03-29 03:42:25Z",
		"deleteTime": "",
		"enabled": false,
		"id": 1520776043888640,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Post/DeleteOnePost",
		"updateTime": ""
	},
	{
		"content": "mutation UpdateOnePost($id: Int!, $title: String, $poster: String, $publishedAt: DateTime, $User: main_UserUpdateOneRequiredWithoutPostNestedInput) {\n  data: main_updateOnePost(\n    data: {title: {set: $title}, poster: {set: $poster}, publishedAt: {set: $publishedAt}, User: $User}\n    where: {id: $id}\n  ) {\n    \n    id\n    title\n    poster\n    publishedAt\n    authorId\n    User {\n      name\n      id\n      avatarUrl\n    }\n  }\n}",
		"createTime": "2023-03-29 03:42:25Z",
		"deleteTime": "",
		"enabled": false,
		"id": 1520776045789184,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Post/UpdateOnePost",
		"updateTime": ""
	},
	{
		"content": "query GetOnePost($id: Int!) {\n  data: main_findFirstPost(where: {id: {equals: $id}}) {\n    \n    id\n    title\n    poster\n    publishedAt\n    authorId\n    User {\n      name\n      id\n      avatarUrl\n    }\n  }\n}",
		"createTime": "2023-03-29 03:42:25Z",
		"deleteTime": "",
		"enabled": false,
		"id": 1520776047689728,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Post/GetOnePost",
		"updateTime": ""
	},
	{
		"content": "query GetPostList($take: Int = 10, $skip: Int = 0, $orderBy: [main_PostOrderByWithRelationInput], $query: main_PostWhereInput) {\n  data: main_findManyPost(\n    skip: $skip\n    take: $take\n  orderBy: $orderBy\n    where: {AND: $query}) {\n    \n    id\n    title\n    poster\n    publishedAt\n    authorId\n    User {\n      name\n      avatarUrl\n    }\n  }\n  total: main_aggregatePost(where: {AND: $query}) @transform(get: \"_count.id\") {\n    _count {\n      id\n    }\n  }\n}",
		"createTime": "2023-03-29 03:42:25Z",
		"deleteTime": "",
		"enabled": false,
		"id": 1520776049197056,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Post/GetPostList",
		"updateTime": ""
	},
	{
		"content": "mutation DeleteManyPost($ids: [Int]!) {\n  data: main_deleteManyPost(where: {id: {in: $ids}}) {\n    count\n  }\n}",
		"createTime": "2023-03-29 03:42:25Z",
		"deleteTime": "",
		"enabled": false,
		"id": 1520776050704384,
		"illegal": false,
		"isPublic": true,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/Post/DeleteManyPost",
		"updateTime": ""
	},
	{
		"content": "mutation MyQuery($avatarUrl: String, $id: String!, $name: String!) @internalOperation {\n  data: main_createOneUser(data: {id: $id, name: $name, avatarUrl: $avatarUrl}) {\n    id\n  }\n}",
		"createTime": "2023-03-29 09:36:47Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1522169491947520,
		"illegal": false,
		"isPublic": false,
		"liveQuery": false,
		"method": "POST",
		"operationType": "mutations",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/User/CreateOne",
		"updateTime": "2023-03-29 09:39:04Z"
	},
	{
		"content": "query MyQuery($id: String!) @internalOperation {\n  data: main_findFirstUser(where: {id: {equals: $id}}) {\n    id\n  }\n}",
		"createTime": "2023-03-29 09:36:58Z",
		"deleteTime": "",
		"enabled": true,
		"id": 1522170168147968,
		"illegal": false,
		"isPublic": false,
		"liveQuery": false,
		"method": "GET",
		"operationType": "queries",
		"remark": "",
		"restUrl": "",
		"roleType": "",
		"roles": "",
		"title": "/User/GetOne",
		"updateTime": "2023-03-29 09:39:18Z"
	},
	{
		"id": 1522203582332928,
		"method": "GET",
		"restUrl": "",
		"operationType": "queries",
		"isPublic": true,
		"remark": "",
		"illegal": false,
		"liveQuery": false,
		"title": "/User/Me",
		"content": "query MyQuery($equals: String! @fromClaim(name: USERID)) {\n  data: main_findFirstUser(where: {id: {equals: $equals}}) {\n    name\n    id\n    avatarUrl\n  }\n}",
		"enabled": true,
		"createTime": "2023-03-29 09:45:28Z",
		"updateTime": "2023-03-29 09:45:57Z",
		"deleteTime": "",
		"roleType": "",
		"roles": ""
	}
]